// Числа Фибоначчи - послед-ть чисел, кот идёт строго опр образом
// Начинается с 0 и 1
// каждое послед число явл-ся суммоё предыдущ двух чисел
// 0 1 1 2 3 5 8 13 21 34 55 89 144

// Задача:
// создать ф-ю fibonacci(n), принимая в кач-ве аргумента число n
// и возвращать n-ный эл-т в последовательности Фибоначчи
// Н-р: = 10    ===> 34

// Решение без рекурсии:
// 1 var

// function fibonacci(num) {
//
//     const result = [0, 1];
//
//     for (let i = 2; i <= num; i++) {
//         const prevNum1 = result[i - 1];
//         const prevNum2 = result[i - 2];
//         result.push(prevNum1 + prevNum2);
//     }
//     return result[num];
// }
// console.log(fibonacci(7));

// 2 var (более сокращ вариант)

// function fibonacciShort(num) {
//     let a = 1,
//         b = 1;
//
//     for (let i = 3; i <= num; i++) {
//         [a, b] = [b, a + b];
//     }
//     return b;
// }
//
// console.log(fibonacciShort(10))

// 3 var (Решение с рекурсией, медленное)

function fibonacci2(num) {
    if(num < 2) {
        return num;
    }
    return fibonacci2(num - 1) + fibonacci2(num - 2);
}

// Пояснение:
// num < 2, когда = 1 => в этот момент мы будем возвращать это число, т.е. мы будем возвращать этот num
// в результате этого всего будет подсчитана вся последовательность
// и мы сможем понять какое число стояло на num позиции
// НО ТАКОЕ РЕШЕНИЕ ОЧ МЕДЛЕННОЕ
// Рекурсия съедает очень много ресурсов всегда
























